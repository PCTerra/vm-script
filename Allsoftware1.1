# Ensure script runs as admin
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Error "Please run this script as Administrator"
    exit 1
}

# Install Chocolatey if not installed
if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
    Set-ExecutionPolicy Bypass -Scope Process -Force
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
    Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
}

$env:Path += ";$env:ALLUSERSPROFILE\chocolatey\bin"

function Install-ChocoPackageIfMissing($name, $check) {
    if (!(Get-Command $check -ErrorAction SilentlyContinue)) {
        Write-Host "Installing $name..."
        choco install $name -y --no-progress
    } else {
        Write-Host "$name already installed, skipping..."
    }
}

# Core tools
Install-ChocoPackageIfMissing "git" "git"
Install-ChocoPackageIfMissing "vscode" "code"
Install-ChocoPackageIfMissing "jdk17" "java"
Install-ChocoPackageIfMissing "eclipse" "eclipse"
Install-ChocoPackageIfMissing "postgresql" "psql"
Install-ChocoPackageIfMissing "python" "python"
Install-ChocoPackageIfMissing "nodejs-lts" "node"
Install-ChocoPackageIfMissing "docker-desktop" "docker"
Install-ChocoPackageIfMissing "minikube" "minikube"

# pip packages
$env:Path += ";C:\Python311\Scripts"
if (!(Get-Command pip -ErrorAction SilentlyContinue)) {
    Write-Host "pip not found. Ensure Python and pip are installed correctly."
} else {
    $packages = "pandas","scikit-learn","tensorflow","plotly","matplotlib","seaborn","jupyterlab"
    foreach ($pkg in $packages) {
        if (-not (pip show $pkg 2>$null)) {
            Write-Host "Installing Python package: $pkg"
            pip install $pkg
        } else {
            Write-Host "Python package $pkg already installed"
        }
    }
}

# Spring Boot CLI
$SpringDir = "C:\spring"
$SpringBin = "$SpringDir\spring-3.2.5\bin"
if (!(Test-Path "$SpringBin\spring.bat")) {
    Write-Host "Installing Spring Boot CLI..."
    $SpringZipUrl = "https://repo.spring.io/release/org/springframework/boot/spring-boot-cli/3.2.5/spring-boot-cli-3.2.5-bin.zip"
    New-Item -ItemType Directory -Force -Path $SpringDir
    Invoke-WebRequest -Uri $SpringZipUrl -OutFile "$SpringDir\spring.zip"
    Expand-Archive -Path "$SpringDir\spring.zip" -DestinationPath $SpringDir
    $env:Path += ";$SpringBin"
} else {
    Write-Host "Spring Boot CLI already installed"
}

# Kafka
$KafkaDir = "C:\kafka"
$KafkaBin = "$KafkaDir\kafka_2.13-3.7.0\bin\windows"
if (!(Test-Path "$KafkaBin\kafka-topics.bat")) {
    Write-Host "Installing Apache Kafka..."
    $KafkaUrl = "https://downloads.apache.org/kafka/3.7.0/kafka_2.13-3.7.0.tgz"
    New-Item -ItemType Directory -Force -Path $KafkaDir
    Invoke-WebRequest -Uri $KafkaUrl -OutFile "$KafkaDir\kafka.tgz"
    tar -xf "$KafkaDir\kafka.tgz" -C $KafkaDir
    $env:Path += ";$KafkaBin"
} else {
    Write-Host "Apache Kafka already installed"
}

# GitHub CLI
if (!(Get-Command gh -ErrorAction SilentlyContinue)) {
    Write-Host "Installing GitHub CLI..."
    Invoke-WebRequest -Uri "https://github.com/cli/cli/releases/latest/download/gh_2.49.0_windows_amd64.msi" -OutFile "$env:TEMP\gh.msi"
    Start-Process msiexec.exe -ArgumentList "/i $env:TEMP\gh.msi /quiet" -Wait
} else {
    Write-Host "GitHub CLI already installed"
}

# GitLab CLI
if (!(Get-Command glab -ErrorAction SilentlyContinue)) {
    Write-Host "Installing GitLab CLI..."
    Invoke-WebRequest -Uri "https://gitlab.com/gitlab-org/cli/-/releases/v1.36.0/downloads/glab_1.36.0_Windows_x86_64.msi" -OutFile "$env:TEMP\glab.msi"
    Start-Process msiexec.exe -ArgumentList "/i $env:TEMP\glab.msi /quiet" -Wait
} else {
    Write-Host "GitLab CLI already installed"
}

# Serverless Framework
if (!(Get-Command serverless -ErrorAction SilentlyContinue)) {
    Write-Host "Installing Serverless Framework..."
    npm install -g serverless
} else {
    Write-Host "Serverless Framework already installed"
}

Write-Host "`nâœ… Installation complete. Restart the VM to ensure all paths are updated." -ForegroundColor Green
